services:
    web_event:
        build: .
        command: >
            sh -c "
            python manage.py makemigrations users profiles events &&
            python manage.py migrate --noinput &&
            python manage.py collectstatic --noinput &&
            gunicorn eventmanagement.wsgi:application -b 0.0.0.0:8000 --reload
            "
        healthcheck:
            test: ["CMD-SHELL", "curl -fs http://localhost:8000/ || exit 1"]
            interval: 10s
            timeout: 3s
            retries: 5
            start_period: 20s
        expose: ["8000"]
        container_name: django_app_event
        #ports:
        #    - 8000:8000
        volumes:
            - ./src:/app
            - static_volume:/app/staticfiles      # collected static
            - media_volume:/app/media             # user uploads
        depends_on:
            pgbouncer_event:
                condition: service_healthy
            redis_event:
                condition: service_healthy
        
        
        env_file:
            - .env

    varnish_event:
        image: varnish:7-alpine          # tiny official image
        container_name: varnish_event
        ports:
            - "80:80"                      # public entry-point
        environment:
            VARNISH_SIZE: 256M             # in-RAM cache; tune freely
        depends_on:
            nginx_event:
                condition: service_started
        volumes:
            - ./varnish/default.vcl:/etc/varnish/default.vcl:ro
    
    celery_worker_event:
        build: .
        container_name: celery_worker_event
        command: celery -A eventmanagement worker -l info --concurrency=4
        volumes:
            - ./src:/app
        env_file: .env
        depends_on:
            - web_event
            - redis_event

    celery_beat_event:
        build: .
        container_name: celery_beat_event
        command: celery -A eventmanagement beat -l info
        volumes:
            - ./src:/app
        env_file: .env
        depends_on:
            - web_event
            - redis_event

    redis_event:
        image: redis:7
        container_name: redis_event
        healthcheck:           
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            retries: 5

        ports:
            - "6379:6379"

    redis_cache_event:
        image: redis:7
        container_name: redis_cache_event    # Django CACHES[] only
        command:
            - redis-server
            - --maxmemory
            - 256mb
            - --maxmemory-policy
            - allkeys-lru
        expose:
            - "6379"                          # stays internal; no host port
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            retries: 5

    nginx_event:
        image: nginx:alpine
        container_name: nginx_event
        expose: ["8080"]
        # ports:
        #     - "80:80"

        volumes:
            - ./config/nginx/django.conf:/etc/nginx/conf.d/default.conf:ro
            - static_volume:/staticfiles:ro       # same data, read-only
            - media_volume:/media:ro
        depends_on:
            web_event:
                condition: service_healthy
                
    
    
    
    db_event:
        image: postgres:17
        container_name: postgres_db_event
        volumes:
            - postgres_db_event:/var/lib/postgresql/data/
        env_file:
            - .env
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 10s
            start_period: 30s
            timeout: 10s
            retries: 5

    pgbouncer_event:
        image: edoburu/pgbouncer:latest
        container_name: pgbouncer_event
        restart: unless-stopped
        depends_on:
            db_event:
                condition: service_healthy
        ports:
            - "6432:6432"          # expose PgBouncer
        env_file: 
            - .env
        environment:
            DB_HOST: db_event        # <-- real Postgres host
            DB_PORT: 5432
            DB_USER: ${POSTGRES_USER}
            DB_PASSWORD: ${POSTGRES_PASSWORD}
            POOL_MODE: transaction
            MAX_CLIENT_CONN: 200
            DEFAULT_POOL_SIZE: 20
            IGNORE_STARTUP_PARAMETERS: "extra_float_digits"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -h localhost -p 6432 -U ${POSTGRES_USER}"]
            interval: 10s
            retries: 5
        volumes:
            - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
            - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro


volumes:
    postgres_db_event:
    static_volume:
    media_volume: